{"version":3,"sources":["colors.array.js","App.js","reportWebVitals.js","index.js"],"names":["COLLORS_ARRAY","quoteDb","App","useState","quote","setQuote","author","setAuthor","quotesArr","setQuotesArr","color","setColor","fetchDb","url","a","fetch","response","json","parsedJson","quotes","useEffect","className","style","backgroundColor","id","icon","faQuoteLeft","class","href","encodeURI","target","faTwitter","onClick","randomInt","Math","floor","length","random","COLORS_ARRAY","getRandomQuote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAWeA,G,MAVP,CAAC,UAAW,UAAW,UAAW,UAAW,UACjD,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UACtC,UAAW,UAAW,UAAW,UAAW,Y,uBCFlDC,EAAU,yIAyDCC,MAvDf,WAAgB,IAAD,EACaC,mBAAS,eADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAU,WAFzB,mBAENG,EAFM,KAEEC,EAFF,OAGqBJ,mBAAS,MAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAIaN,mBAAS,WAJtB,mBAINO,EAJM,KAICC,EAJD,KAMPC,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACSC,MAAMF,GADf,cACRG,EADQ,gBAEWA,EAASC,OAFpB,OAERC,EAFQ,OAGdT,EAAaS,EAAWC,QAHV,2CAAH,sDAkBb,OAbAC,qBAAU,WACRR,EAAQX,KACP,CAACA,IAYF,qBAAKoB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CAACC,gBAAgBb,GAAvD,SAEE,sBAAKc,GAAG,YAAR,UAEA,qBAAIA,GAAG,OAAP,UACE,sBAAMA,GAAG,aAAT,SAAsB,cAAC,IAAD,CAAiBC,KAAMC,QAE5CtB,KAGH,oBAAGoB,GAAG,SAAN,eACKlB,KAGL,sBAAKqB,MAAM,UAAX,UAEA,mBAAGH,GAAG,cACNI,KAAMC,UAAU,kEAChBC,OAAO,SAFP,SAEiB,cAAC,IAAD,CAAiBL,KAAMM,QAExC,wBAAQP,GAAG,YAAYQ,QAAW,kBA/BjB,WACrB,IAAIC,EAAYC,KAAKC,MAAM3B,EAAU4B,OAAOF,KAAKG,UACjDhC,EAASG,EAAUyB,GAAW7B,OAC9BG,EAAUC,EAAUyB,GAAW3B,QAC/BK,EAAS2B,EAAaL,IA2BoBM,IAAtC,qCC5COC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c872ccfb.chunk.js","sourcesContent":["const COLLORS_ARRAY=\r\n        ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n\t\t  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n\t\t  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n\t\t  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n\t\t  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n\t\t  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n\t\t  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n\t\t  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n\t\t  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n          '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\nexport default COLLORS_ARRAY","import {useState, useEffect} from 'react';\nimport './App.scss';\nimport COLORS_ARRAY from './colors.array';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\n\n\nlet quoteDb = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nfunction App() {\n  const [quote, setQuote] = useState('Hello World');\n  const [author, setAuthor] = useState ('charles');\n  const [quotesArr, setQuotesArr] = useState(null);\n  const [color, setColor] = useState('#CCFF1A');\n\n  const fetchDb = async (url) =>{\n    const response = await fetch(url)\n    const parsedJson = await response.json()\n    setQuotesArr(parsedJson.quotes)\n  }\n  useEffect(()=>{\n    fetchDb(quoteDb);\n  }, [quoteDb]);\n\n  const getRandomQuote = () =>{\n    let randomInt = Math.floor(quotesArr.length*Math.random());\n    setQuote(quotesArr[randomInt].quote);\n    setAuthor(quotesArr[randomInt].author);\n    setColor(COLORS_ARRAY[randomInt]);\n  }\n\n\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{backgroundColor:color}}>\n\n        <div id=\"quote-box\">\n\n        <h2 id=\"text\">\n          <span id=\"quote-icon\"><FontAwesomeIcon icon={faQuoteLeft}/></span>\n\n          {quote}\n        </h2>\n\n        <p id=\"author\">\n          - {author}\n        </p>\n\n        <div class=\"buttons\">\n\n        <a id=\"tweet-quote\" \n        href={encodeURI('https://www.twitter.com/intent/tweet?text=${quote} - ${author}')} \n        target=\"blank_\" ><FontAwesomeIcon icon={faTwitter}/></a>\n\n        <button id=\"new-quote\" onClick = {()=>getRandomQuote()}  >Random Quote</button>\n        </div>\n\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}